create table if not EXISTS genres (
    genres_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name_genres VARCHAR(100) NOT NULL,
    CONSTRAINT genres_id_pk PRIMARY KEY (genres_id)
);
create table if not EXISTS rating_mpa(
    film_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50),
);

create table IF NOT EXISTS users (
    user_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(255) UNIQUE,
    login VARCHAR(255) UNIQUE,
    birthday DATE
);

create table if not EXISTS films (
    film_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(200),
    description VARCHAR(200),
    release_date DATE,
    duration TIME,
    genre VARCHAR(50),
    CONSTRAINT film_id_pk PRIMARY KEY (film_id)
);

create TABLE IF NOT EXISTS genres_film (
    film_id INTEGER NOT NULL REFERENCES films (film_id),
    genre_id INTEGER not null REFERENCES genres (genres_id) ,
     CONSTRAINT film_genres_pk PRIMARY KEY (film_id, genres_id),
     CONSTRAINT fk_film FOREIGN KEY (film_id) REFERENCES films (film_id) ON delete CASCADE,
     CONSTRAINT fk_genre FOREIGN KEY (genres_id) REFERENCES genres (genres_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS likes (
    film_id INTEGER not null REFERENCES films (film_id) ON delete CASCADE,
    user_id INTEGER not null REFERENCES users (user_id) ON delete CASCADE,
    CONSTRAINT likes_pk PRIMARY KEY (film_id, user_id)
);

create TABLE IF NOT EXISTS friends (
    user_id INTEGER REFERENCES users(user_id) ON delete CASCADE,
    friend_id INTEGER REFERENCES users(user_id) ON delete CASCADE,
    status VARCHAR(50),
    CONSTRAINT id PRIMARY KEY (user_id,friend_id)
);